{"ast":null,"code":"import { of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class PreloadModulesStrategy {\n  preload(route, load) {\n    if (route.data && route.data['preload']) {\n      //logger to be added\n      return load();\n    }\n    return of(null);\n  }\n}\nPreloadModulesStrategy.ɵfac = function PreloadModulesStrategy_Factory(t) {\n  return new (t || PreloadModulesStrategy)();\n};\nPreloadModulesStrategy.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PreloadModulesStrategy,\n  factory: PreloadModulesStrategy.ɵfac\n});","map":{"version":3,"names":["of","PreloadModulesStrategy","preload","route","load","data","factory","ɵfac"],"sources":["C:\\Users\\Satya Narayan\\Documents\\project\\TheftSecurity\\src\\app\\ts-admin\\src\\app\\core\\strategies\\preload-modules.strategy.ts"],"sourcesContent":["import { PreloadingStrategy, Route } from '@angular/router';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, of } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class PreloadModulesStrategy implements PreloadingStrategy {\r\n  preload(route: Route, load: Function): Observable<any> {\r\n    if (route.data && route.data['preload']) {\r\n      //logger to be added\r\n      return load();\r\n    }\r\n    return of(null);\r\n  }\r\n}\r\n"],"mappings":"AAEA,SAAqBA,EAAE,QAAQ,MAAM;;AAGrC,OAAM,MAAOC,sBAAsB;EACjCC,OAAOA,CAACC,KAAY,EAAEC,IAAc;IAClC,IAAID,KAAK,CAACE,IAAI,IAAIF,KAAK,CAACE,IAAI,CAAC,SAAS,CAAC,EAAE;MACvC;MACA,OAAOD,IAAI,EAAE;;IAEf,OAAOJ,EAAE,CAAC,IAAI,CAAC;EACjB;;AAPWC,sBAAsB,C;mBAAtBA,sBAAsB;AAAA;AAAtBA,sBAAsB,C;SAAtBA,sBAAsB;EAAAK,OAAA,EAAtBL,sBAAsB,CAAAM;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}